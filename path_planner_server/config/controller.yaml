# controller_server:
#   ros__parameters:
#     use_sim_time: False
#     controller_frequency: 5.0 #10.0
#     min_x_velocity_threshold: 0.001
#     min_y_velocity_threshold: 0.5
#     min_theta_velocity_threshold: 0.001
#     failure_tolerance: 0.3
#     progress_checker_plugin: "progress_checker"
#     goal_checker_plugins: ["general_goal_checker"] 
#     controller_plugins: ["FollowPath"]

#     # Progress checker parameters
#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.5
#       movement_time_allowance: 10.0
#     # Goal checker parameters
#     general_goal_checker:
#       stateful: True
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.10
#       yaw_goal_tolerance: 0.5
#     # DWB parameters
#     FollowPath:
#       plugin: "dwb_core::DWBLocalPlanner"
#       debug_trajectory_details: True
#       min_vel_x: 0.0
#       min_vel_y: 0.0
#       max_vel_x: 0.1
#       max_vel_y: 0.0
#       max_vel_theta: 0.3
#       min_speed_xy: 0.0
#       max_speed_xy: 0.26
#       min_speed_theta: 0.0
#       acc_lim_x: 2.5
#       acc_lim_y: 0.0
#       acc_lim_theta: 3.2
#       decel_lim_x: -2.5
#       decel_lim_y: 0.0
#       decel_lim_theta: -3.2
#       vx_samples: 20
#       vy_samples: 5
#       vtheta_samples: 20
#       sim_time: 1.7
#       linear_granularity: 0.05
#       angular_granularity: 0.025
#       transform_tolerance: 0.2
#       xy_goal_tolerance: 0.1
#       trans_stopped_velocity: 0.15
#       short_circuit_trajectory_evaluation: True
#       stateful: True
#       critics: ["RotateToGoal", "Oscillation", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
#       BaseObstacle.scale: 0.02
#       PathAlign.scale: 32.0
#       PathAlign.forward_point_distance: 0.1
#       GoalAlign.scale: 24.0
#       GoalAlign.forward_point_distance: 0.1
#       PathDist.scale: 32.0
#       GoalDist.scale: 24.0
#       RotateToGoal.scale: 32.0
#       RotateToGoal.slowing_factor: 5.0
#       RotateToGoal.lookahead_time: -1.0

# local_costmap:
#   local_costmap:
#     ros__parameters:
#       update_frequency: 5.0
#       publish_frequency: 2.0
#       global_frame: map  #robot_odom
#       robot_base_frame: robot_base_footprint
#       use_sim_time: False
#       rolling_window: true
#       width: 3
#       height: 3
#       resolution: 0.05
#       robot_radius: 0.25
#       plugins: ["voxel_layer", "inflation_layer"]
#       filters: ["keepout_filter", "inflation_layer"]
#       inflation_layer:
#         plugin: "nav2_costmap_2d::InflationLayer"
#         cost_scaling_factor: 6.0
#         inflation_radius: 0.45
#       voxel_layer:
#         plugin: "nav2_costmap_2d::VoxelLayer"
#         enabled: True
#         publish_voxel_map: True
#         origin_z: 0.0
#         z_resolution: 0.05
#         z_voxels: 16
#         max_obstacle_height: 2.0
#         mark_threshold: 0
#         observation_sources: scan
#         scan:
#           topic: /scan
#           max_obstacle_height: 2.0
#           clearing: True
#           marking: True
#           data_type: "LaserScan"
#           raytrace_max_range: 3.0
#           raytrace_min_range: 1.0
#           obstacle_max_range: 2.5
#           obstacle_min_range: 1.0
#       obstacle_layer:
#         plugin: "nav2_costmap_2d::ObstacleLayer"
#         #habilitar capa de obstáculos
#         enabled: True
#         #Despeje las celdas ocupadas bajo la huella del robot.
#         footprint_clearing_enabled: True
#         #fuente de observación
#         observation_sources: scan
#         scan:
#           topic: /scan
#           # Parámetro para cámaras 3d
#           max_obstacle_height: 2.0
#           # Si la fuente debe marcarse en el mapa de costes.
#           # Si la fuente debe raytrace claro en costmap.
#           clearing: True
#           marking: True
#           # Tipo de dato
#           data_type: "LaserScan"
#           # Alcance máximo del trazado de rayos para eliminar obstáculos del mapa de costes.
#           raytrace_max_range: 3.0
#           # Alcance mínimo del trazado de rayos para eliminar obstáculos del mapa de costes.
#           raytrace_min_range: 0.0
#           # Alcance máximo para marcar obstáculos en el mapa de costes.
#           obstacle_max_range: 2.5
#           # Alcance mínimo para marcar obstáculos en el mapa de costes
#           #obstacle_min_range: 0.5
#           obstacle_min_range: 0.0
#       keepout_filter:
#         plugin: "nav2_costmap_2d::KeepoutFilter"
#         enabled: True
#         filter_info_topic: "/costmap_filter_info"
#       static_layer:
#         map_subscribe_transient_local: True
#       always_send_full_costmap: True


controller_server:
  ros__parameters:
    use_sim_time: False
    # especifica la frecuencia con la que el controlador intentará generar 
    # comandos de velocidad para seguir el plan
    controller_frequency: 5.0
    # El servidor del controlador filtra la parte de velocidad de los mensajes 
    # de odometría recibidos antes de enviarlos al plugin del controlador. 
    # Los valores de odometría por debajo de este umbral (en rad/s) se establecerán en 0,0.
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    #Duración máxima en segundos que el plugin pueda fallar
    failure_tolerance: 0.3
    #~~~~~~~~~~~~~Nombres de plugins a cargar~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # nombre del plugin para conecer el progreso del robot
    progress_checker_plugin: "progress_checker"
    # nombre del plugin para conocer el resultado del goal
    goal_checker_plugins: ["general_goal_checker"] 
    # nombre del plugin para el controlador
    controller_plugins: ["FollowPath"]
    # Tópico donde se publicaran las velocidades
    # cmd_vel_topic: "/robot/cmd_vel"
    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      # Cantidad mínima que debe moverse un robot para progresar hacia la meta (m).
      required_movement_radius: 0.1
      # Tiempo máximo de que dispone un robot para desplazarse el radio mínimo (s).
      movement_time_allowance: 10.0

    # Goal checker parameters
    general_goal_checker:
      stateful: false
      plugin: "nav2_controller::SimpleGoalChecker"
      #----------------------DWB Tolerancias----------------------------
      #xy_goal_tolerance: 0.25
      xy_goal_tolerance: 0.10
      # Tolerancia para cumplir los criterios de cumplimiento de objetivos (rad).
      #yaw_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.05
      trans_stopped_velocity: 0.10   # m/s
      rot_stopped_velocity: 0.15    # rad/s
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      # PUblicar la información de la trayectoria
      debug_trajectory_details: True
      #~~~~~~~~~~~~~~~~~~~~Parámetros cinemáticos~~~~~~~~~~~~~~~~~~
      #------------Velocidades--------------
      #min_vel_x: -0.1
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.1
      max_vel_y: 0.0
      max_vel_theta: 0.30
      min_speed_xy: 0.0
      max_speed_xy: 0.2
      min_speed_theta: 0.0
      #------------Aceleraciones--------------
      acc_lim_x: 0.25
      acc_lim_y: 0.0
      acc_lim_theta: 0.25
      decel_lim_x: -0.25
      decel_lim_y: 0.0
      decel_lim_theta: -0.25
      #--------------------XYTheta Iterator--------------------
      # Número de muestreos en velocidades que seran definidos para las posibles trayectorias
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      #--------------------Standaard generador de trayectorias--------------------
      # Tiempo de simulación por delante (s).
      sim_time: 1.7
      # Distancia lineal hacia delante para proyectar.
      linear_granularity: 0.05
      # Distancia angular hacia adelante para proyectar
      angular_granularity: 0.025
      #----------------------DWB Controlador----------------------------
      # Tiempo máximo permitido entre transformaciones
      transform_tolerance: 0.2
      ########################
       #----------------------DWB Tolerancias----------------------------
      #xy_goal_tolerance: 0.25
      xy_goal_tolerance: 0.1


      ########################
      ########################
      trans_stopped_velocity: 0.15
      ########################
      # Deje de evaluar las puntuaciones después de encontrar la mejor puntuación.
      short_circuit_trajectory_evaluation: True
      stateful: True
      #----------------------Críticos----------------------------
      #critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      critics: ["RotateToGoal", "Oscillation", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0

      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: False
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: map
      robot_base_frame: robot_base_footprint
      rolling_window: true
      width: 2
      height: 2
      resolution: 0.05
      robot_radius: 0.25
      filters: ["keepout_filter"]
      plugins: ["obstacle_layer", "inflation_layer"]
      
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 6.0
        inflation_radius: 0.5
      keepout_filter:
        plugin: "nav2_costmap_2d::KeepoutFilter"
        enabled: True
        filter_info_topic: "/costmap_filter_info"
      #~~~~~~~~~~~~~~~~~~~Obstacle layer config~~~~~~~~~~~~~~~~~~~+
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        #habilitar capa de obstáculos
        enabled: True
        #Despeje las celdas ocupadas bajo la huella del robot.
        footprint_clearing_enabled: True
        #fuente de observación
        observation_sources: scan
        scan:
          topic: /scan
          # Parámetro para cámaras 3d
          max_obstacle_height: 2.0
          # Si la fuente debe marcarse en el mapa de costes.
          # Si la fuente debe raytrace claro en costmap.
          clearing: True
          marking: True
          # Tipo de dato
          data_type: "LaserScan"
          # Alcance máximo del trazado de rayos para eliminar obstáculos del mapa de costes.
          raytrace_max_range: 3.0
          # Alcance mínimo del trazado de rayos para eliminar obstáculos del mapa de costes.
          raytrace_min_range: 0.0
          # Alcance máximo para marcar obstáculos en el mapa de costes.
          obstacle_max_range: 2.5
          # Alcance mínimo para marcar obstáculos en el mapa de costes
          #obstacle_min_range: 0.5
          obstacle_min_range: 0.0
          
      #static_layer:
        #map_subscribe_transient_local: True
      always_send_full_costmap: True

#   Not included in course
#local_costmap_client:
 # ros__parameters:
  #  use_sim_time: True
#local_costmap_rclcpp_node:
 # ros__parameters:
  #  use_sim_time: True

#   Not included in course
#controller_server_rclcpp_node:
 # ros__parameters:
  #  use_sim_time: True